
作业1：完善ARPGDemo2.5的版本，然后备份。
作业2：
阶段5：ARPGDemo2.6 导入逼真的场景和模型！
任务：里程牌！技能系统！[10+?下去]
      阶段性优化 改进！
优化1：资源管理的优化【Resources中资源】
       资源：Assets：模型，组件：脚本，.....
             Resources:预制件资源【动态加载资源】

      1问题：预制件资源不可能都放在Resources根目录中，
             分类管理，分到不同的子文件夹管理【合理的】


      如何读取：出错【代码从资源Resources根目录中找！】
                
                怎么办？解决办法：让代码从实际目录中找ok！
                需要告诉程序，每个预制件的实际目录！
                引入专门的文件：地图文件=资源配置文件
      1)资源配置文件:本质文本文件【.txt=.ini】
                     特点：键=值
       技能名称=技能的实际路径
       BaseMeleeAttackSkill=Skill\BaseMeleeAttackSkill
       Hit_Ice_Chest=Skill\HitFx\Hit_Ice_Chest
      2 问题 ：如何生成资源配置文件 
               1）手动 麻烦 
               2）自动 ok！
               如何自动生成资源配置文件：技术IO技术
               
      3 代码中要使用资源配置文件》
        提供一个完成以下步骤的类=资源管理类【IO】：

        流程：加载预制件
             【1读取资源配置文件  txt》字典
               2得到所需资源的实际路径
                key：BaseMeleeAttackSkill》value：实际路径
               3从实际路径中加载预制件】

 总结 步骤1：把技能预制件放在原来的文件夹里！
      步骤2：使用【配置文件生成工具】，生成配置文件resMap 
             Editor里边》项目多菜单》点击》查看    
      步骤3：在Common中引入【资源管理类】
      步骤4：使用资源管理类加载预制件！ 
             CharacterSkillManager
             Resources》ResourceManager 【10分钟】
---------------------------------------------
优化2：程序集反射
      1》程序集 看笔记
      2》unity中使用dll。找到【添加引用】命令
                         视图：类视图》选中项目位置》找到命令
  
      反射:什么是反射；用在哪里，用途1,2,3
           项目中：使用反射动态创建对象 好处！复用维护性好！
           反射使用步骤1,2    

day07
   资源管理+程序集 csc 反射  
           【应用程序源代码】 csc 【exe，dll，：il】 
                    Framework{clr{il编译器}} 【二进制代码】
           C语言      源代码  编译器【exe，dll，：二进制代码】
                                    非托管 直接OS执行
           注意区别：exe
           方法（Type type）调用：方法（typeof（Student））


   网络编程：
   1》基本概念     tcp,udp协议有什么不同，简述tcp和udp
   2》网络编程步骤方法 socket【网络】编程步骤，网络是如何通讯！
      掌握：知道基本编程步骤，自己能写出简单的网络通讯的程序
            能看懂复杂的网络通讯的案例+修改+应用

   目的：面试！
         能看懂网络编程的代码！
   问题：深入的自学！根据公司的需求去学！
         公司需要：net WCF技术 最新 功能最强大的 网络编程框架
                       WCF书籍！
   ――――――――――――――――――――――――――――
   1)为什么网络编程也经常叫做socket编程 1：2：最早
   2）网络编程特点：
      难 1 知道好多概念，知道底层工作原理
           主流开发平台 都已经实现了封装【把底层 细节 复杂】
                        只要调用，打到通讯目的即可！
         2 用到的命名空间多，数据类型多 技术多！
           网络编程+
           IO技术{网络流 读写器}+
           多线程【异步调用】

         3 方法调用先后非常严格
         4 同时考虑两端【服务端，客户端】                    
      简单 1实现数据交互【通讯】即可
           2调用【平台】封装好的方法
           3步骤死【固定】

   












